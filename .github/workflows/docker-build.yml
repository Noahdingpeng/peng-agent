name: Docker Build

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

env:
  SERVER_IMAGE: ghcr.io/${{ github.repository }}/server
  WEB_IMAGE: ghcr.io/${{ github.repository }}/front
  VERSION: v1.6.6.1

jobs:
  # Code analysis and statistics
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Python code analysis with uv
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install uv
        run: |
          pip install uv
          
      - name: Install Python dependencies with uv
        run: |
          cd server
          # Create a virtual environment first
          uv venv
          # Install project dependencies
          uv pip install --no-deps -e .
          uv pip install pylint pytest pytest-cov
        
      - name: Analyze Python code with Pylint
        run: |
          cd server
          # Use the virtual environment
          source .venv/bin/activate
          pylint --disable=all --enable=E,F,W --max-line-length=120 $(find . -type f -name "*.py" | grep -v "__pycache__")
      
      - name: Test Python code with pytest
        run: |
          cd server
          # Use the virtual environment
          source .venv/bin/activate
          python -m pytest --cov=. --cov-report=xml
          
      # TypeScript/React code analysis with bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install web dependencies with Bun
        run: |
          cd web
          bun install
          
      - name: Run ESLint
        run: |
          cd web
          bun run eslint . --ext .js,.jsx,.ts,.tsx
          
      - name: Run TypeScript compiler check
        run: |
          cd web
          bun run tsc --noEmit
          
      # Docker linting
      - name: Run Hadolint (Dockerfile linting)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: server/Dockerfile
          
      - name: Run Hadolint on web Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: web/Dockerfile
      
      # Upload code coverage reports to GitHub
      - name: Upload coverage to GitHub
        uses: codecov/codecov-action@v4
        with:
          file: ./server/coverage.xml
          flags: server,python
          fail_ci_if_error: false
          
      # Code scanning with CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript, typescript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
          
  # Test builds (for non-main branches)
  test-build:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push server image (x64)
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.SERVER_IMAGE }}:${{ env.VERSION }}-nightly

      - name: Build and push web image (x64)
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.WEB_IMAGE }}:${{ env.VERSION }}-nightly

  # Production builds (for main branch)
  prod-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Server x64 build
      - name: Build and push server image (x64)
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.SERVER_IMAGE }}:${{ env.VERSION }}
            ${{ env.SERVER_IMAGE }}:latest

      # Server arm build
      - name: Build and push server image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.SERVER_IMAGE }}:${{ env.VERSION }}-arm
            ${{ env.SERVER_IMAGE }}:latest-arm

      # Web x64 build
      - name: Build and push web image (x64)
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.WEB_IMAGE }}:${{ env.VERSION }}
            ${{ env.WEB_IMAGE }}:latest

      # Web arm build
      - name: Build and push web image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.WEB_IMAGE }}:${{ env.VERSION }}-arm
            ${{ env.WEB_IMAGE }}:latest-arm